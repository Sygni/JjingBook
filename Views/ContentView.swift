//
//  ContentView.swift
//  JjingBook
//
//  Created by Jeongah Seo on 8/16/25.
//

import SwiftUI
import CoreData

struct ContentView: View {
    @Environment(\.managedObjectContext) private var viewContext

    // Core Data Î™©Î°ù
    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \Book.dateRead, ascending: false)],
        animation: .default
    )
    private var books: FetchedResults<Book>

    // ‚úÖ ÏãúÌä∏ ÌëúÏ∂ú ÏÉÅÌÉú
    @State private var showingAddBook = false
    @State private var bookToDelete: Book?            // ‚úÖ ÏÇ≠Ï†ú ÎåÄÏÉÅ Î≥¥Í¥Ä

    var body: some View {
        NavigationView {
          GeometryReader { proxy in
            let fullW = proxy.size.width
            let bookW = min(fullW * 0.58, 340)        // ÌôîÎ©¥Ïùò ÏïΩ 58%, ÏµúÎåÄ 340pt Ï†ïÎèÑ
            let centerBase = (fullW - bookW) / 2      // Í∏∞Î≥∏ÏùÄ Ï§ëÏïô Ï†ïÎ†¨

            let list = Array(books)              // FetchedResults -> Array
            let toneFlags = alternatingToneFlags(for: list)
              
            ScrollView {
              LazyVStack(spacing: 0) {
                ForEach(Array(list.enumerated()), id: \.1.objectID) { idx, book in
                  // Í∞Å Ï±ÖÎßàÎã§ ÏãúÏûë Ïó¨Î∞± Í≤∞Ï†ï (Ï§ëÏïô Í∏∞Ï§Ä ¬±24pt)
                  let key = (book.title ?? "") + "|" + (book.author ?? "")
                  let jitter = startOffsetX(from: key, maxJitter: 24)
                  let start = centerBase + jitter
                    
                  // üîπ ÌôÄÏàò Îü∞Ïù¥Î©¥ ÏÇ¥Ïßù Ïñ¥Îë°Í≤å (ÏõêÌïòÎ©¥ 0.95/1.05 Îì±ÏúºÎ°ú Î∞îÍøîÎèÑ Îê®)
                  let tone: CGFloat = toneFlags[idx] ? 0.90 : 1.0
                    
                  // Ìñâ ÌïòÎÇò: [Ïó¨Î∞± spacer] [Ï±ÖÎì± Í≥†Ï†ïÌè≠] [Ïò§Î•∏Ï™Ω ÎÇ®ÏùÄ Í≥µÍ∞Ñ]
                  HStack(spacing: 0) {
                    Spacer().frame(width: max(0, start))
                      BookStackView(book: book, tone: tone)
                      .frame(width: bookW, alignment: .leading)
                    Spacer() // ÎÇ®ÏùÄ Í≥µÍ∞Ñ ÏûêÎèô Ìù°Ïàò
                  }
                  .contentShape(Rectangle()) // (Í∏∏Í≤å ÎàåÎü¨ Î©îÎâ¥ Ïûò Îú®Í≤å ÌûàÌä∏ÏòÅÏó≠ ÌôïÎ≥¥)
                  .contextMenu {
                    Button(role: .destructive) { bookToDelete = book } label: {
                      Label("ÏÇ≠Ï†ú", systemImage: "trash")
                    }
                  }
                }
              }
              // ÌôîÎ©¥Ïù¥ ÎπÑÏñ¥ Î≥¥Ïùº Îïå Î∞îÎã• Ï†ïÎ†¨
              .frame(minHeight: proxy.size.height, alignment: .bottom)
            }
          }
          .navigationTitle("Reading Stack")
          .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
              Button { showingAddBook = true } label: { Image(systemName: "plus") }
            }
          }
          .sheet(isPresented: $showingAddBook) {
            AddBookView(context: viewContext)
          }
          .alert("Ïù¥ Ï±ÖÏùÑ ÏÇ≠Ï†úÌï†ÍπåÏöî?", isPresented: .constant(bookToDelete != nil)) {
            Button("Ï∑®ÏÜå", role: .cancel) { bookToDelete = nil }
            Button("ÏÇ≠Ï†ú", role: .destructive) {
              if let b = bookToDelete { delete(b) }
              bookToDelete = nil
            }
          } message: { Text(bookToDelete?.title ?? "") }
        }
    }

    private func delete(_ book: Book) {
        viewContext.delete(book)
        do { try viewContext.save() } catch { print("Delete error: \(error)") }
    }
    
    // Îü∞ Ïù∏Îç±Ïä§ ÌîåÎûòÍ∑∏ Í≥ÑÏÇ∞
    private func alternatingToneFlags(for books: [Book]) -> [Bool] {
        var flags: [Bool] = []
        var lastIsKo: Bool? = nil
        var runIndex = 0
        for b in books {
            if let last = lastIsKo, last == b.isKorean {
                runIndex += 1
            } else {
                runIndex = 0
                lastIsKo = b.isKorean
            }
            flags.append(runIndex % 2 == 1) // ÌôÄÏàòÎ≤àÏß∏Îßå ÌÜ†Í∏Ä
        }
        return flags
    }
}

